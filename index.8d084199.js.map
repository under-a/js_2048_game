{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_sliced_to_array.js","node_modules/@swc/helpers/esm/_array_with_holes.js","node_modules/@swc/helpers/esm/_iterable_to_array_limit.js","node_modules/@swc/helpers/esm/_non_iterable_rest.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_type_of.js","src/modules/utils/getRandomFreeCell.js","src/modules/utils/shiftRow.js","src/modules/utils/transposeState.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $09cbfe85151ea6c6$export$e6256bf45c68d561(arr) {\n    if (Array.isArray(arr)) return arr;\n}\n\n\nfunction $8ca2848f896a6803$export$2fd15edff6687200(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\n\n\nfunction $a0bc1859061deae1$export$60dbc22abd7da546() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\nfunction $c3b10a83b523f372$export$79e617b1955a2616(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $d4f69c5c6c4654b1$export$a5be06335b3a083c(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n}\n\n\nfunction $efec029548ccee7f$export$fdf2a89c76341bbf(arr, i) {\n    return (0, $09cbfe85151ea6c6$export$e6256bf45c68d561)(arr) || (0, $8ca2848f896a6803$export$2fd15edff6687200)(arr, i) || (0, $d4f69c5c6c4654b1$export$a5be06335b3a083c)(arr, i) || (0, $a0bc1859061deae1$export$60dbc22abd7da546)();\n}\n\n\n\nfunction $c50969dc1df61e8b$export$7e0947b5ad3404e2(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$1eb58a6e75231000(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $227c6742e0ff6f82$export$1b5e630bc3aea29f(arr) {\n    return (0, $c50969dc1df61e8b$export$7e0947b5ad3404e2)(arr) || (0, $09c9f293d010c0e1$export$1eb58a6e75231000)(arr) || (0, $d4f69c5c6c4654b1$export$a5be06335b3a083c)(arr) || (0, $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b)();\n}\n\n\nfunction $0b5c99e6a0876eaa$export$5f0017c582d45a2d(obj) {\n    \"@swc/helpers - typeof\";\n    return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n}\n\n\nfunction $6a124458f423dbf7$var$getRandomFreeCell(freeCells) {\n    if (freeCells.length === 0) return null;\n    var randomIndex = Math.floor(Math.random() * freeCells.length);\n    return freeCells[randomIndex];\n}\nvar $6a124458f423dbf7$export$2e2bcd8739ae039 = $6a124458f423dbf7$var$getRandomFreeCell;\n\n\nfunction $bbc13708a14397a8$var$shiftRow(array, shiftLeft) {\n    var result = array.filter(function(num) {\n        return num !== 0;\n    });\n    var zeroCount = array.length - result.length;\n    while(zeroCount > 0){\n        if (shiftLeft) result.push(0);\n        else result.unshift(0);\n        zeroCount--;\n    }\n    return result;\n}\nvar $bbc13708a14397a8$export$2e2bcd8739ae039 = $bbc13708a14397a8$var$shiftRow;\n\n\nfunction $66444a57b196fc28$var$transposeState(state) {\n    return state[0].map(function(_, colIndex) {\n        return state.map(function(row) {\n            return row[colIndex];\n        });\n    });\n}\nvar $66444a57b196fc28$export$2e2bcd8739ae039 = $66444a57b196fc28$var$transposeState;\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        (0, $8713978b2328d32b$export$2996f80ef42b8419)(this, Game);\n        this.initialState = initialState;\n        this.state = initialState.map(function(row) {\n            return row.slice();\n        });\n        this.status = \"idle\";\n        this.score = 0;\n    }\n    (0, $4fc75ccb937ab1df$export$d60067ff2358eee8)(Game, [\n        {\n            /**\n   * Moves tiles in provided direction\n   *\n   * @param {string} callback\n   * Name of corresponding method with an axis\n   * @param {boolean} direction\n   * Reflects the positive or negative direction of the axis\n   */ key: \"move\",\n            value: function move(callback, direction) {\n                if (this.getStatus() === \"playing\") {\n                    if (this[callback](direction)) this.setCell((0, $6a124458f423dbf7$export$2e2bcd8739ae039)(this.getFreeCells()));\n                }\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                this.move(\"collapseRow\", true);\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                this.move(\"collapseRow\", false);\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                this.move(\"collapseColumn\", true);\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                this.move(\"collapseColumn\", false);\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.state;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Returns array of free cells coords.\n   *\n   * @returns {number[][]} [[rowIndex, colIndex]...]\n   */ key: \"getFreeCells\",\n            value: function getFreeCells() {\n                var field = this.getState();\n                var freeCells = [];\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    var _loop = function() {\n                        var row = _step.value;\n                        row.forEach(function(cell, index) {\n                            if (cell === 0) freeCells.push([\n                                field.indexOf(row),\n                                index\n                            ]);\n                        });\n                    };\n                    for(var _iterator = field[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                return freeCells;\n            }\n        },\n        {\n            /**\n   * Fills free cell with \"2\" or \"4\" value.\n   *\n   * @param {number[]} cellCoords\n   * Coords of free cell\n   */ key: \"setCell\",\n            value: function setCell(cellCoords) {\n                if (!cellCoords) return;\n                var _cellCoords = (0, $efec029548ccee7f$export$fdf2a89c76341bbf)(cellCoords, 2), rowIndex = _cellCoords[0], columnIndex = _cellCoords[1];\n                var cellValue;\n                if (Math.random() < 0.9) cellValue = 2;\n                else cellValue = 4;\n                this.state[rowIndex][columnIndex] = cellValue;\n            }\n        },\n        {\n            /**\n   * @param {HTMLTableSectionElement} field\n   * Table tbody object\n   */ key: \"updateField\",\n            value: function updateField(field) {\n                var currentState = this.getState();\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = field.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var row = _step.value;\n                        var rowIndex = (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(field.children).indexOf(row);\n                        var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n                        try {\n                            for(var _iterator1 = row.cells[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n                                var cell = _step1.value;\n                                var columnIndex = (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row.cells).indexOf(cell);\n                                var cellValue = currentState[rowIndex][columnIndex];\n                                cell.textContent = cellValue || \"\";\n                                cell.classList = \"field-cell field-cell--\".concat(cellValue || \"\");\n                            }\n                        } catch (err) {\n                            _didIteratorError1 = true;\n                            _iteratorError1 = err;\n                        } finally{\n                            try {\n                                if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                                    _iterator1.return();\n                                }\n                            } finally{\n                                if (_didIteratorError1) {\n                                    throw _iteratorError1;\n                                }\n                            }\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n            }\n        },\n        {\n            key: \"collapse\",\n            value: function collapse(array, collapseLeft) {\n                var result = [];\n                var score = 0;\n                if (collapseLeft) {\n                    for(var i = 0; i < array.length; i++)if (array[i] === array[i + 1]) {\n                        result.push(array[i] * 2);\n                        score += array[i] * 2;\n                        i++;\n                    } else result.push(array[i]);\n                } else {\n                    for(var i1 = array.length - 1; i1 >= 0; i1--)if (array[i1] === array[i1 - 1]) {\n                        result.unshift(array[i1] * 2);\n                        score += array[i1] * 2;\n                        i1--;\n                    } else result.unshift(array[i1]);\n                }\n                while(result.length < array.length)if (collapseLeft) result.push(0);\n                else result.unshift(0);\n                this.score += score;\n                return result;\n            }\n        },\n        {\n            /**\n   * @returns {boolean}\n   */ key: \"collapseRow\",\n            value: function collapseRow() {\n                var collapseLeft = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;\n                var state = this.getState();\n                var newState = [];\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = state[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var row = _step.value;\n                        var shiftedRow = (0, $bbc13708a14397a8$export$2e2bcd8739ae039)(row, collapseLeft);\n                        var collapsedRow = this.collapse(shiftedRow, collapseLeft);\n                        newState.push(collapsedRow);\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                if (JSON.stringify(state) === JSON.stringify(newState)) return false;\n                this.state = newState;\n                return true;\n            }\n        },\n        {\n            /**\n   * @returns {boolean}\n   */ key: \"collapseColumn\",\n            value: function collapseColumn() {\n                var collapseUp = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;\n                var state = (0, $66444a57b196fc28$export$2e2bcd8739ae039)(this.getState());\n                var newState = [];\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = state[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var row = _step.value;\n                        var shiftedRow = (0, $bbc13708a14397a8$export$2e2bcd8739ae039)(row, collapseUp);\n                        var collapsedRow = this.collapse(shiftedRow, collapseUp);\n                        newState.push(collapsedRow);\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                if (JSON.stringify(state) === JSON.stringify(newState)) return false;\n                this.state = (0, $66444a57b196fc28$export$2e2bcd8739ae039)(newState);\n                return true;\n            }\n        },\n        {\n            /**\n   * @returns {boolean}\n   */ key: \"isMovesPossible\",\n            value: function isMovesPossible() {\n                var _loop = function(i) {\n                    var row = stateRows[i];\n                    var column = stateColumns[i];\n                    var colsMovePossible = column.some(function(cell, number) {\n                        return cell === column[number + 1];\n                    });\n                    var rowsMovePossible = row.some(function(cell, number) {\n                        return cell === row[number + 1];\n                    });\n                    if (rowsMovePossible || colsMovePossible) return {\n                        v: true\n                    };\n                };\n                var stateRows = this.getState();\n                var stateColumns = (0, $66444a57b196fc28$export$2e2bcd8739ae039)(this.getState());\n                var freeCells = this.getFreeCells().length;\n                if (freeCells) return true;\n                for(var i = 0; i < stateRows.length; i++){\n                    var _ret = _loop(i);\n                    if ((0, $0b5c99e6a0876eaa$export$5f0017c582d45a2d)(_ret) === \"object\") return _ret.v;\n                }\n                return false;\n            }\n        },\n        {\n            /**\n   * @returns {boolean}\n   */ key: \"isWinning\",\n            value: function isWinning() {\n                var state = this.getState();\n                return state.some(function(row) {\n                    return row.some(function(cell) {\n                        return cell === 2048;\n                    });\n                });\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                this.status = \"playing\";\n                this.setCell((0, $6a124458f423dbf7$export$2e2bcd8739ae039)(this.getFreeCells()));\n                this.setCell((0, $6a124458f423dbf7$export$2e2bcd8739ae039)(this.getFreeCells()));\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.status = \"idle\";\n                this.score = 0;\n                this.state = this.initialState.map(function(row) {\n                    return row.slice();\n                });\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports([\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n]);\nvar $197cd56b15c33885$var$body = document.querySelector(\"body\");\nvar $197cd56b15c33885$var$field = $197cd56b15c33885$var$body.querySelector(\".game-field tbody\");\nvar $197cd56b15c33885$var$startBtn = document.querySelector(\"button.start\");\nvar $197cd56b15c33885$var$messageStart = document.querySelector(\".message-start\");\nvar $197cd56b15c33885$var$messageWin = document.querySelector(\".message-win\");\nvar $197cd56b15c33885$var$messageLose = document.querySelector(\".message-lose\");\nvar $197cd56b15c33885$var$gameScore = document.querySelector(\".game-score\");\n$197cd56b15c33885$var$body.addEventListener(\"keydown\", function(e) {\n    switch(e.key){\n        case \"ArrowLeft\":\n            $197cd56b15c33885$var$game.moveLeft();\n            $197cd56b15c33885$var$game.updateField($197cd56b15c33885$var$field);\n            break;\n        case \"ArrowRight\":\n            $197cd56b15c33885$var$game.moveRight();\n            $197cd56b15c33885$var$game.updateField($197cd56b15c33885$var$field);\n            break;\n        case \"ArrowUp\":\n            $197cd56b15c33885$var$game.moveUp();\n            $197cd56b15c33885$var$game.updateField($197cd56b15c33885$var$field);\n            break;\n        case \"ArrowDown\":\n            $197cd56b15c33885$var$game.moveDown();\n            $197cd56b15c33885$var$game.updateField($197cd56b15c33885$var$field);\n            break;\n    }\n    $197cd56b15c33885$var$gameScore.textContent = $197cd56b15c33885$var$game.score;\n    if (!$197cd56b15c33885$var$game.isMovesPossible()) {\n        $197cd56b15c33885$var$messageLose.classList.remove(\"hidden\");\n        $197cd56b15c33885$var$game.status = \"lose\";\n    }\n    if ($197cd56b15c33885$var$game.isWinning()) {\n        $197cd56b15c33885$var$messageWin.classList.remove(\"hidden\");\n        $197cd56b15c33885$var$game.status = \"win\";\n    }\n});\n$197cd56b15c33885$var$startBtn.addEventListener(\"click\", function(e) {\n    if (e.target.classList.contains(\"restart\")) {\n        $197cd56b15c33885$var$game.restart();\n        e.target.classList = \"button start\";\n        e.target.textContent = \"Start\";\n        $197cd56b15c33885$var$messageLose.classList.add(\"hidden\");\n        $197cd56b15c33885$var$messageWin.classList.add(\"hidden\");\n    } else {\n        $197cd56b15c33885$var$game.start();\n        e.target.classList = \"button restart\";\n        e.target.textContent = \"Restart\";\n    }\n    $197cd56b15c33885$var$messageStart.classList.toggle(\"hidden\");\n    $197cd56b15c33885$var$gameScore.textContent = $197cd56b15c33885$var$game.score;\n    $197cd56b15c33885$var$game.updateField($197cd56b15c33885$var$field);\n});\n\n})();\n//# sourceMappingURL=index.8d084199.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game([\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n]);\n\nconst body = document.querySelector('body');\nconst field = body.querySelector('.game-field tbody');\nconst startBtn = document.querySelector('button.start');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst gameScore = document.querySelector('.game-score');\n\nbody.addEventListener('keydown', (e) => {\n  switch (e.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      game.updateField(field);\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      game.updateField(field);\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      game.updateField(field);\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      game.updateField(field);\n      break;\n  }\n\n  gameScore.textContent = game.score;\n\n  if (!game.isMovesPossible()) {\n    messageLose.classList.remove('hidden');\n    game.status = 'lose';\n  }\n\n  if (game.isWinning()) {\n    messageWin.classList.remove('hidden');\n    game.status = 'win';\n  }\n});\n\nstartBtn.addEventListener('click', (e) => {\n  if (e.target.classList.contains('restart')) {\n    game.restart();\n    e.target.classList = 'button start';\n    e.target.textContent = 'Start';\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n  } else {\n    game.start();\n    e.target.classList = 'button restart';\n    e.target.textContent = 'Restart';\n  }\n\n  messageStart.classList.toggle('hidden');\n  gameScore.textContent = game.score;\n  game.updateField(field);\n});\n","'use strict';\n\nimport getRandomFreeCell from './utils/getRandomFreeCell';\nimport shiftRow from './utils/shiftRow';\nimport transposeState from './utils/transposeState';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = initialState;\n    this.state = initialState.map((row) => row.slice());\n    this.status = 'idle';\n    this.score = 0;\n  }\n\n  /**\n   * Moves tiles in provided direction\n   *\n   * @param {string} callback\n   * Name of corresponding method with an axis\n   * @param {boolean} direction\n   * Reflects the positive or negative direction of the axis\n   */\n  move(callback, direction) {\n    if (this.getStatus() === 'playing') {\n      if (this[callback](direction)) {\n        this.setCell(getRandomFreeCell(this.getFreeCells()));\n      }\n    }\n  }\n\n  moveLeft() {\n    this.move('collapseRow', true);\n  }\n\n  moveRight() {\n    this.move('collapseRow', false);\n  }\n\n  moveUp() {\n    this.move('collapseColumn', true);\n  }\n\n  moveDown() {\n    this.move('collapseColumn', false);\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Returns array of free cells coords.\n   *\n   * @returns {number[][]} [[rowIndex, colIndex]...]\n   */\n  getFreeCells() {\n    const field = this.getState();\n    const freeCells = [];\n\n    for (const row of field) {\n      row.forEach((cell, index) => {\n        if (cell === 0) {\n          freeCells.push([field.indexOf(row), index]);\n        }\n      });\n    }\n\n    return freeCells;\n  }\n\n  /**\n   * Fills free cell with \"2\" or \"4\" value.\n   *\n   * @param {number[]} cellCoords\n   * Coords of free cell\n   */\n  setCell(cellCoords) {\n    if (!cellCoords) {\n      return;\n    }\n\n    const [rowIndex, columnIndex] = cellCoords;\n\n    let cellValue;\n\n    if (Math.random() < 0.9) {\n      cellValue = 2;\n    } else {\n      cellValue = 4;\n    }\n\n    this.state[rowIndex][columnIndex] = cellValue;\n  }\n\n  /**\n   * @param {HTMLTableSectionElement} field\n   * Table tbody object\n   */\n  updateField(field) {\n    const currentState = this.getState();\n\n    for (const row of field.children) {\n      const rowIndex = [...field.children].indexOf(row);\n\n      for (const cell of row.cells) {\n        const columnIndex = [...row.cells].indexOf(cell);\n        const cellValue = currentState[rowIndex][columnIndex];\n\n        cell.textContent = cellValue || '';\n        cell.classList = `field-cell field-cell--${cellValue || ''}`;\n      }\n    }\n  }\n\n  collapse(array, collapseLeft) {\n    const result = [];\n    let score = 0;\n\n    if (collapseLeft) {\n      for (let i = 0; i < array.length; i++) {\n        if (array[i] === array[i + 1]) {\n          result.push(array[i] * 2);\n          score += array[i] * 2;\n          i++;\n        } else {\n          result.push(array[i]);\n        }\n      }\n    } else {\n      for (let i = array.length - 1; i >= 0; i--) {\n        if (array[i] === array[i - 1]) {\n          result.unshift(array[i] * 2);\n          score += array[i] * 2;\n          i--;\n        } else {\n          result.unshift(array[i]);\n        }\n      }\n    }\n\n    while (result.length < array.length) {\n      if (collapseLeft) {\n        result.push(0);\n      } else {\n        result.unshift(0);\n      }\n    }\n\n    this.score += score;\n\n    return result;\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  collapseRow(collapseLeft = true) {\n    const state = this.getState();\n    const newState = [];\n\n    for (const row of state) {\n      const shiftedRow = shiftRow(row, collapseLeft);\n      const collapsedRow = this.collapse(shiftedRow, collapseLeft);\n\n      newState.push(collapsedRow);\n    }\n\n    if (JSON.stringify(state) === JSON.stringify(newState)) {\n      return false;\n    }\n\n    this.state = newState;\n\n    return true;\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  collapseColumn(collapseUp = true) {\n    const state = transposeState(this.getState());\n    const newState = [];\n\n    for (const row of state) {\n      const shiftedRow = shiftRow(row, collapseUp);\n      const collapsedRow = this.collapse(shiftedRow, collapseUp);\n\n      newState.push(collapsedRow);\n    }\n\n    if (JSON.stringify(state) === JSON.stringify(newState)) {\n      return false;\n    }\n\n    this.state = transposeState(newState);\n\n    return true;\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  isMovesPossible() {\n    const stateRows = this.getState();\n    const stateColumns = transposeState(this.getState());\n    const freeCells = this.getFreeCells().length;\n\n    if (freeCells) {\n      return true;\n    }\n\n    for (let i = 0; i < stateRows.length; i++) {\n      const row = stateRows[i];\n      const column = stateColumns[i];\n\n      const colsMovePossible = column.some((cell, number) => {\n        return cell === column[number + 1];\n      });\n\n      const rowsMovePossible = row.some((cell, number) => {\n        return cell === row[number + 1];\n      });\n\n      if (rowsMovePossible || colsMovePossible) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  isWinning() {\n    const state = this.getState();\n\n    return state.some((row) => {\n      return row.some((cell) => cell === 2048);\n    });\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = 'playing';\n    this.setCell(getRandomFreeCell(this.getFreeCells()));\n    this.setCell(getRandomFreeCell(this.getFreeCells()));\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.status = 'idle';\n    this.score = 0;\n\n    this.state = this.initialState.map((row) => row.slice());\n  }\n}\n\nmodule.exports = Game;\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _array_with_holes } from \"./_array_with_holes.js\";\nimport { _iterable_to_array_limit } from \"./_iterable_to_array_limit.js\";\nimport { _non_iterable_rest } from \"./_non_iterable_rest.js\";\nimport { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nexport { _sliced_to_array as _ };\n","export function _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nexport { _array_with_holes as _ };\n","export function _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n    if (_i == null) return;\n\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n\n    try {\n        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally {\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally {\n            if (_d) throw _e;\n        }\n    }\n\n    return _arr;\n}\nexport { _iterable_to_array_limit as _ };\n","export function _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_rest as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","export function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","import { _array_without_holes } from \"./_array_without_holes.js\";\nimport { _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","export function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","export function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","export function _type_of(obj) {\n    \"@swc/helpers - typeof\";\n\n    return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n}\nexport { _type_of as _ };\n","function getRandomFreeCell(freeCells) {\n  if (freeCells.length === 0) {\n    return null;\n  }\n\n  const randomIndex = Math.floor(Math.random() * freeCells.length);\n\n  return freeCells[randomIndex];\n}\n\nexport default getRandomFreeCell;\n","function shiftRow(array, shiftLeft) {\n  const result = array.filter((num) => num !== 0);\n  let zeroCount = array.length - result.length;\n\n  while (zeroCount > 0) {\n    if (shiftLeft) {\n      result.push(0);\n    } else {\n      result.unshift(0);\n    }\n    zeroCount--;\n  }\n\n  return result;\n}\n\nexport default shiftRow;\n","function transposeState(state) {\n  return state[0].map((_, colIndex) => state.map((row) => row[colIndex]));\n}\n\nexport default transposeState;\n"],"names":["$c3b10a83b523f372$export$79e617b1955a2616","arr","len","length","i","arr2","Array","$d4f69c5c6c4654b1$export$a5be06335b3a083c","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","from","test","$227c6742e0ff6f82$export$1b5e630bc3aea29f","isArray","iter","Symbol","iterator","TypeError","$6a124458f423dbf7$export$2e2bcd8739ae039","freeCells","randomIndex","Math","floor","random","$bbc13708a14397a8$export$2e2bcd8739ae039","array","shiftLeft","result","filter","num","zeroCount","push","unshift","$66444a57b196fc28$export$2e2bcd8739ae039","state","map","_","colIndex","row","$197cd56b15c33885$var$game","protoProps","Game","initialState","arguments","instance","Constructor","status","score","key","value","callback","direction","getStatus","setCell","getFreeCells","move","field","getState","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","next","done","_loop","forEach","cell","index","indexOf","err","return","cellCoords","cellValue","_cellCoords","_s","_e","_i","_arr","_n","_d","rowIndex","columnIndex","currentState","children","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","cells","textContent","classList","concat","collapseLeft","i1","newState","shiftedRow","collapsedRow","collapse","JSON","stringify","collapseUp","stateRows","stateColumns","_ret","column","colsMovePossible","some","number","rowsMovePossible","v","obj","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","$197cd56b15c33885$var$body","document","querySelector","$197cd56b15c33885$var$field","$197cd56b15c33885$var$startBtn","$197cd56b15c33885$var$messageStart","$197cd56b15c33885$var$messageWin","$197cd56b15c33885$var$messageLose","$197cd56b15c33885$var$gameScore","addEventListener","e","moveLeft","updateField","moveRight","moveUp","moveDown","isMovesPossible","remove","isWinning","contains","restart","add","start","toggle"],"version":3,"file":"index.8d084199.js.map"}