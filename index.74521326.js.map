{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","src/modules/utils/getRandomFreeCell.js","src/modules/utils/shiftRow.js","src/modules/utils/transposeState.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\nfunction $75b80e7a000d1847$var$getRandomFreeCell(freeCells) {\n    if (freeCells.length === 0) return null;\n    const randomIndex = Math.floor(Math.random() * freeCells.length);\n    return freeCells[randomIndex];\n}\nvar $75b80e7a000d1847$export$2e2bcd8739ae039 = $75b80e7a000d1847$var$getRandomFreeCell;\n\n\nfunction $efc207240519df47$var$shiftRow(array, shiftLeft) {\n    const result = array.filter((num)=>num !== 0);\n    let zeroCount = array.length - result.length;\n    while(zeroCount > 0){\n        if (shiftLeft) result.push(0);\n        else result.unshift(0);\n        zeroCount--;\n    }\n    return result;\n}\nvar $efc207240519df47$export$2e2bcd8739ae039 = $efc207240519df47$var$shiftRow;\n\n\nfunction $bae98999a5b9d39a$var$transposeState(state) {\n    return state[0].map((_, colIndex)=>state.map((row)=>row[colIndex]));\n}\nvar $bae98999a5b9d39a$export$2e2bcd8739ae039 = $bae98999a5b9d39a$var$transposeState;\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.initialState = initialState;\n        this.state = initialState.map((row)=>row.slice());\n        this.status = \"idle\";\n        this.score = 0;\n    }\n    /**\n   * Moves tiles in provided direction\n   *\n   * @param {string} callback\n   * Name of corresponding method with an axis\n   * @param {boolean} direction\n   * Reflects the positive or negative direction of the axis\n   */ move(callback, direction) {\n        if (this.getStatus() === \"playing\") {\n            if (this[callback](direction)) this.setCell((0, $75b80e7a000d1847$export$2e2bcd8739ae039)(this.getFreeCells()));\n        }\n    }\n    moveLeft() {\n        this.move(\"collapseRow\", true);\n    }\n    moveRight() {\n        this.move(\"collapseRow\", false);\n    }\n    moveUp() {\n        this.move(\"collapseColumn\", true);\n    }\n    moveDown() {\n        this.move(\"collapseColumn\", false);\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.state;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Returns array of free cells coords.\n   *\n   * @returns {number[][]} [[rowIndex, colIndex]...]\n   */ getFreeCells() {\n        const field = this.getState();\n        const freeCells = [];\n        for (const row of field)row.forEach((cell, index)=>{\n            if (cell === 0) freeCells.push([\n                field.indexOf(row),\n                index\n            ]);\n        });\n        return freeCells;\n    }\n    /**\n   * Fills free cell with \"2\" or \"4\" value.\n   *\n   * @param {number[]} cellCoords\n   * Coords of free cell\n   */ setCell(cellCoords) {\n        if (!cellCoords) return;\n        const [rowIndex, columnIndex] = cellCoords;\n        let cellValue;\n        if (Math.random() < 0.9) cellValue = 2;\n        else cellValue = 4;\n        this.state[rowIndex][columnIndex] = cellValue;\n    }\n    /**\n   * @param {HTMLTableSectionElement} field\n   * Table tbody object\n   */ updateField(field) {\n        const currentState = this.getState();\n        for (const row of field.children){\n            const rowIndex = [\n                ...field.children\n            ].indexOf(row);\n            for (const cell of row.cells){\n                const columnIndex = [\n                    ...row.cells\n                ].indexOf(cell);\n                const cellValue = currentState[rowIndex][columnIndex];\n                cell.textContent = cellValue || \"\";\n                cell.classList = `field-cell field-cell--${cellValue || \"\"}`;\n            }\n        }\n    }\n    collapse(array, collapseLeft) {\n        const result = [];\n        let score = 0;\n        if (collapseLeft) {\n            for(let i = 0; i < array.length; i++)if (array[i] === array[i + 1]) {\n                result.push(array[i] * 2);\n                score += array[i] * 2;\n                i++;\n            } else result.push(array[i]);\n        } else {\n            for(let i = array.length - 1; i >= 0; i--)if (array[i] === array[i - 1]) {\n                result.unshift(array[i] * 2);\n                score += array[i] * 2;\n                i--;\n            } else result.unshift(array[i]);\n        }\n        while(result.length < array.length)if (collapseLeft) result.push(0);\n        else result.unshift(0);\n        this.score += score;\n        return result;\n    }\n    /**\n   * @returns {boolean}\n   */ collapseRow(collapseLeft = true) {\n        const state = this.getState();\n        const newState = [];\n        for (const row of state){\n            const shiftedRow = (0, $efc207240519df47$export$2e2bcd8739ae039)(row, collapseLeft);\n            const collapsedRow = this.collapse(shiftedRow, collapseLeft);\n            newState.push(collapsedRow);\n        }\n        if (JSON.stringify(state) === JSON.stringify(newState)) return false;\n        this.state = newState;\n        return true;\n    }\n    /**\n   * @returns {boolean}\n   */ collapseColumn(collapseUp = true) {\n        const state = (0, $bae98999a5b9d39a$export$2e2bcd8739ae039)(this.getState());\n        const newState = [];\n        for (const row of state){\n            const shiftedRow = (0, $efc207240519df47$export$2e2bcd8739ae039)(row, collapseUp);\n            const collapsedRow = this.collapse(shiftedRow, collapseUp);\n            newState.push(collapsedRow);\n        }\n        if (JSON.stringify(state) === JSON.stringify(newState)) return false;\n        this.state = (0, $bae98999a5b9d39a$export$2e2bcd8739ae039)(newState);\n        return true;\n    }\n    /**\n   * @returns {boolean}\n   */ isMovesPossible() {\n        const stateRows = this.getState();\n        const stateColumns = (0, $bae98999a5b9d39a$export$2e2bcd8739ae039)(this.getState());\n        const freeCells = this.getFreeCells().length;\n        if (freeCells) return true;\n        for(let i = 0; i < stateRows.length; i++){\n            const row = stateRows[i];\n            const column = stateColumns[i];\n            const colsMovePossible = column.some((cell, number)=>{\n                return cell === column[number + 1];\n            });\n            const rowsMovePossible = row.some((cell, number)=>{\n                return cell === row[number + 1];\n            });\n            if (rowsMovePossible || colsMovePossible) return true;\n        }\n        return false;\n    }\n    /**\n   * @returns {boolean}\n   */ isWinning() {\n        const state = this.getState();\n        return state.some((row)=>{\n            return row.some((cell)=>cell === 2048);\n        });\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.status = \"playing\";\n        this.setCell((0, $75b80e7a000d1847$export$2e2bcd8739ae039)(this.getFreeCells()));\n        this.setCell((0, $75b80e7a000d1847$export$2e2bcd8739ae039)(this.getFreeCells()));\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.status = \"idle\";\n        this.score = 0;\n        this.state = this.initialState.map((row)=>row.slice());\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports([\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n]);\nconst $09e991522ca7e64e$var$body = document.querySelector(\"body\");\nconst $09e991522ca7e64e$var$field = $09e991522ca7e64e$var$body.querySelector(\".game-field tbody\");\nconst $09e991522ca7e64e$var$startBtn = document.querySelector(\"button.start\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\n$09e991522ca7e64e$var$body.addEventListener(\"keydown\", (e)=>{\n    switch(e.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            $09e991522ca7e64e$var$game.updateField($09e991522ca7e64e$var$field);\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            $09e991522ca7e64e$var$game.updateField($09e991522ca7e64e$var$field);\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            $09e991522ca7e64e$var$game.updateField($09e991522ca7e64e$var$field);\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            $09e991522ca7e64e$var$game.updateField($09e991522ca7e64e$var$field);\n            break;\n    }\n    $09e991522ca7e64e$var$gameScore.textContent = $09e991522ca7e64e$var$game.score;\n    if (!$09e991522ca7e64e$var$game.isMovesPossible()) {\n        $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$game.status = \"lose\";\n    }\n    if ($09e991522ca7e64e$var$game.isWinning()) {\n        $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$game.status = \"win\";\n    }\n});\n$09e991522ca7e64e$var$startBtn.addEventListener(\"click\", (e)=>{\n    if (e.target.classList.contains(\"restart\")) {\n        $09e991522ca7e64e$var$game.restart();\n        e.target.classList = \"button start\";\n        e.target.textContent = \"Start\";\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    } else {\n        $09e991522ca7e64e$var$game.start();\n        e.target.classList = \"button restart\";\n        e.target.textContent = \"Restart\";\n    }\n    $09e991522ca7e64e$var$messageStart.classList.toggle(\"hidden\");\n    $09e991522ca7e64e$var$gameScore.textContent = $09e991522ca7e64e$var$game.score;\n    $09e991522ca7e64e$var$game.updateField($09e991522ca7e64e$var$field);\n});\n\n\n//# sourceMappingURL=index.74521326.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game([\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n]);\n\nconst body = document.querySelector('body');\nconst field = body.querySelector('.game-field tbody');\nconst startBtn = document.querySelector('button.start');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst gameScore = document.querySelector('.game-score');\n\nbody.addEventListener('keydown', (e) => {\n  switch (e.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      game.updateField(field);\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      game.updateField(field);\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      game.updateField(field);\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      game.updateField(field);\n      break;\n  }\n\n  gameScore.textContent = game.score;\n\n  if (!game.isMovesPossible()) {\n    messageLose.classList.remove('hidden');\n    game.status = 'lose';\n  }\n\n  if (game.isWinning()) {\n    messageWin.classList.remove('hidden');\n    game.status = 'win';\n  }\n});\n\nstartBtn.addEventListener('click', (e) => {\n  if (e.target.classList.contains('restart')) {\n    game.restart();\n    e.target.classList = 'button start';\n    e.target.textContent = 'Start';\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n  } else {\n    game.start();\n    e.target.classList = 'button restart';\n    e.target.textContent = 'Restart';\n  }\n\n  messageStart.classList.toggle('hidden');\n  gameScore.textContent = game.score;\n  game.updateField(field);\n});\n","'use strict';\n\nimport getRandomFreeCell from './utils/getRandomFreeCell';\nimport shiftRow from './utils/shiftRow';\nimport transposeState from './utils/transposeState';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = initialState;\n    this.state = initialState.map((row) => row.slice());\n    this.status = 'idle';\n    this.score = 0;\n  }\n\n  /**\n   * Moves tiles in provided direction\n   *\n   * @param {string} callback\n   * Name of corresponding method with an axis\n   * @param {boolean} direction\n   * Reflects the positive or negative direction of the axis\n   */\n  move(callback, direction) {\n    if (this.getStatus() === 'playing') {\n      if (this[callback](direction)) {\n        this.setCell(getRandomFreeCell(this.getFreeCells()));\n      }\n    }\n  }\n\n  moveLeft() {\n    this.move('collapseRow', true);\n  }\n\n  moveRight() {\n    this.move('collapseRow', false);\n  }\n\n  moveUp() {\n    this.move('collapseColumn', true);\n  }\n\n  moveDown() {\n    this.move('collapseColumn', false);\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Returns array of free cells coords.\n   *\n   * @returns {number[][]} [[rowIndex, colIndex]...]\n   */\n  getFreeCells() {\n    const field = this.getState();\n    const freeCells = [];\n\n    for (const row of field) {\n      row.forEach((cell, index) => {\n        if (cell === 0) {\n          freeCells.push([field.indexOf(row), index]);\n        }\n      });\n    }\n\n    return freeCells;\n  }\n\n  /**\n   * Fills free cell with \"2\" or \"4\" value.\n   *\n   * @param {number[]} cellCoords\n   * Coords of free cell\n   */\n  setCell(cellCoords) {\n    if (!cellCoords) {\n      return;\n    }\n\n    const [rowIndex, columnIndex] = cellCoords;\n\n    let cellValue;\n\n    if (Math.random() < 0.9) {\n      cellValue = 2;\n    } else {\n      cellValue = 4;\n    }\n\n    this.state[rowIndex][columnIndex] = cellValue;\n  }\n\n  /**\n   * @param {HTMLTableSectionElement} field\n   * Table tbody object\n   */\n  updateField(field) {\n    const currentState = this.getState();\n\n    for (const row of field.children) {\n      const rowIndex = [...field.children].indexOf(row);\n\n      for (const cell of row.cells) {\n        const columnIndex = [...row.cells].indexOf(cell);\n        const cellValue = currentState[rowIndex][columnIndex];\n\n        cell.textContent = cellValue || '';\n        cell.classList = `field-cell field-cell--${cellValue || ''}`;\n      }\n    }\n  }\n\n  collapse(array, collapseLeft) {\n    const result = [];\n    let score = 0;\n\n    if (collapseLeft) {\n      for (let i = 0; i < array.length; i++) {\n        if (array[i] === array[i + 1]) {\n          result.push(array[i] * 2);\n          score += array[i] * 2;\n          i++;\n        } else {\n          result.push(array[i]);\n        }\n      }\n    } else {\n      for (let i = array.length - 1; i >= 0; i--) {\n        if (array[i] === array[i - 1]) {\n          result.unshift(array[i] * 2);\n          score += array[i] * 2;\n          i--;\n        } else {\n          result.unshift(array[i]);\n        }\n      }\n    }\n\n    while (result.length < array.length) {\n      if (collapseLeft) {\n        result.push(0);\n      } else {\n        result.unshift(0);\n      }\n    }\n\n    this.score += score;\n\n    return result;\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  collapseRow(collapseLeft = true) {\n    const state = this.getState();\n    const newState = [];\n\n    for (const row of state) {\n      const shiftedRow = shiftRow(row, collapseLeft);\n      const collapsedRow = this.collapse(shiftedRow, collapseLeft);\n\n      newState.push(collapsedRow);\n    }\n\n    if (JSON.stringify(state) === JSON.stringify(newState)) {\n      return false;\n    }\n\n    this.state = newState;\n\n    return true;\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  collapseColumn(collapseUp = true) {\n    const state = transposeState(this.getState());\n    const newState = [];\n\n    for (const row of state) {\n      const shiftedRow = shiftRow(row, collapseUp);\n      const collapsedRow = this.collapse(shiftedRow, collapseUp);\n\n      newState.push(collapsedRow);\n    }\n\n    if (JSON.stringify(state) === JSON.stringify(newState)) {\n      return false;\n    }\n\n    this.state = transposeState(newState);\n\n    return true;\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  isMovesPossible() {\n    const stateRows = this.getState();\n    const stateColumns = transposeState(this.getState());\n    const freeCells = this.getFreeCells().length;\n\n    if (freeCells) {\n      return true;\n    }\n\n    for (let i = 0; i < stateRows.length; i++) {\n      const row = stateRows[i];\n      const column = stateColumns[i];\n\n      const colsMovePossible = column.some((cell, number) => {\n        return cell === column[number + 1];\n      });\n\n      const rowsMovePossible = row.some((cell, number) => {\n        return cell === row[number + 1];\n      });\n\n      if (rowsMovePossible || colsMovePossible) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  isWinning() {\n    const state = this.getState();\n\n    return state.some((row) => {\n      return row.some((cell) => cell === 2048);\n    });\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = 'playing';\n    this.setCell(getRandomFreeCell(this.getFreeCells()));\n    this.setCell(getRandomFreeCell(this.getFreeCells()));\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.status = 'idle';\n    this.score = 0;\n\n    this.state = this.initialState.map((row) => row.slice());\n  }\n}\n\nmodule.exports = Game;\n","function getRandomFreeCell(freeCells) {\n  if (freeCells.length === 0) {\n    return null;\n  }\n\n  const randomIndex = Math.floor(Math.random() * freeCells.length);\n\n  return freeCells[randomIndex];\n}\n\nexport default getRandomFreeCell;\n","function shiftRow(array, shiftLeft) {\n  const result = array.filter((num) => num !== 0);\n  let zeroCount = array.length - result.length;\n\n  while (zeroCount > 0) {\n    if (shiftLeft) {\n      result.push(0);\n    } else {\n      result.unshift(0);\n    }\n    zeroCount--;\n  }\n\n  return result;\n}\n\nexport default shiftRow;\n","function transposeState(state) {\n  return state[0].map((_, colIndex) => state.map((row) => row[colIndex]));\n}\n\nexport default transposeState;\n"],"names":["$75b80e7a000d1847$export$2e2bcd8739ae039","freeCells","length","randomIndex","Math","floor","random","$efc207240519df47$export$2e2bcd8739ae039","array","shiftLeft","result","filter","num","zeroCount","push","unshift","$bae98999a5b9d39a$export$2e2bcd8739ae039","state","map","_","colIndex","row","$09e991522ca7e64e$var$game","constructor","initialState","slice","status","score","move","callback","direction","getStatus","setCell","getFreeCells","moveLeft","moveRight","moveUp","moveDown","getScore","getState","field","forEach","cell","index","indexOf","cellCoords","cellValue","rowIndex","columnIndex","updateField","currentState","children","cells","textContent","classList","collapse","collapseLeft","i","collapseRow","newState","shiftedRow","collapsedRow","JSON","stringify","collapseColumn","collapseUp","isMovesPossible","stateRows","stateColumns","column","colsMovePossible","some","number","rowsMovePossible","isWinning","start","restart","$09e991522ca7e64e$var$body","document","querySelector","$09e991522ca7e64e$var$field","$09e991522ca7e64e$var$startBtn","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$gameScore","addEventListener","e","key","remove","target","contains","add","toggle"],"version":3,"file":"index.74521326.js.map"}